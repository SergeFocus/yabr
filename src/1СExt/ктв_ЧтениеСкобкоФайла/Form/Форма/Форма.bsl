&НаКлиенте
Перем ЗапоминатьНомераСтрок; // Истина - при чтении файла, будут запоминаться номера строк для каждого элемента

#Область ОбработчикиЭлементовФормы

// Процедура - обработка начала выбора файла
//
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Файл списка баз кластера 1С (*.lst)|*.lst|Файл журнала регистрации 1С (*.lgp)|*.lgp|Файл словаря журнала регистрации 1С (*.lgf)|*.lgf";
	Диалог.Заголовок = "Скобочный файл 1С";

	ЗавершениеВыбораФайла = Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтаФорма);
	
	Диалог.Показать(ЗавершениеВыбораФайла);
	
КонецПроцедуры // ПутьКФайлуНачалоВыбора()

// Процедура - продолжение обработки выбора файла
//
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	
КонецПроцедуры // ПутьКФайлуНачалоВыбораЗавершение()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "Прочитать"
//
&НаКлиенте
Процедура Прочитать(Команда)
	
	Результат = ПрочитатьСкобкоФайл(ПутьКФайлу);
	
КонецПроцедуры // Прочитать()

#КонецОбласти

#Область ПроцедурыЧтенияСкобкофайла

// Процедура - Прочитать скобко файл
//
// Параметры:
//  ПутьКФайлу                 - Строка     -  путь к файлу для чтения
//  ОбрабатыватьРезультат      - Булево     -  Истина - результат чтения будет обработан;
//                                             Ложь - будет возвращен "сырой" результат
//  ДополнительныеПараметры    - Структура  -  структура дополнительных параметров
//
&НаКлиенте
Функция ПрочитатьСкобкоФайл(ПутьКФайлу, ОбрабатыватьРезультат = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура();
	КонецЕсли;
	
	ТипФайла = ТипФайла(ПутьКФайлу);
	
	ДополнительныеПараметрыОбработки = Новый Структура("ТипФайла, ПутьКФайлу", ТипФайла, ПутьКФайлу);
	
	Для Каждого ТекПараметр Из ДополнительныеПараметры Цикл
		ДополнительныеПараметрыОбработки.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
	КонецЦикла;
	
	ПравилаОбработки = ПолучитьПравилаОбработки(ДополнительныеПараметрыОбработки);
	
	СтруктураЧтения = ИнициализироватьЭлемент(Неопределено);
	
	Текст = Новый ЧтениеТекста(ПутьКФайлу);
	
	ДанныеСтроки = Текст.ПрочитатьСтроку();
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекНачало = Начало;
	НачКоличество = 0;
	
	Скорость = 0;
	ТекСкорость = 0;
	
	НомерСтроки = 1;
	
	Пока НЕ ДанныеСтроки = Неопределено Цикл
		
		СтрокаДляОбработки = "";
		СтрокаДляОбработкиПрочитана = Ложь;
		КавычкиОткрыты = Ложь;
		
		// сборка "завершенной" строки, где кавычки закрыты и последний символ = "," или "}"
		НомераСтрок = Новый Соответствие();
		Пока НЕ (СтрокаДляОбработкиПрочитана ИЛИ ДанныеСтроки = Неопределено) Цикл
			Если ЗапоминатьНомераСтрок ИЛИ НомераСтрок.Количество() = 0 Тогда
				НомераСтрок.Вставить(НомерСтроки, НомерСтроки);
			КонецЕсли;
			СтрокаДляОбработкиПрочитана = ДополнитьСтрокуДляОбработки(СтрокаДляОбработки, ДанныеСтроки, КавычкиОткрыты);
			Если НЕ СтрокаДляОбработкиПрочитана Тогда
				Если КавычкиОткрыты Тогда
					СтрокаДляОбработки = СтрокаДляОбработки + Символы.ПС;
				КонецЕсли;
				ДанныеСтроки = Текст.ПрочитатьСтроку();
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
		СчетчикСимволов = 1;
		
		ПрочитатьДанныеСтроки(СтруктураЧтения, СтрокаДляОбработки, СчетчикСимволов, НомераСтрок, ПравилаОбработки);
		
		Если НомерСтроки % 1000 = 0 Тогда
			ТекСкорость = (НомерСтроки - НачКоличество) / (ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекНачало) * 1000;
			Скорость = НомерСтроки / (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) * 1000;
			НачКоличество = НомерСтроки;
			ТекНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		КонецЕсли;
		
		ДанныеСтроки = Текст.ПрочитатьСтроку();
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// переход к корневому элементу структуры чтения
	Пока НЕ СтруктураЧтения.Родитель = Неопределено Цикл
		СтруктураЧтения = СтруктураЧтения.Родитель;
	КонецЦикла;
	
	Результат = СтруктураЧтения;
	
	Если ОбрабатыватьРезультат Тогда
		Результат = Новый Массив();
		Для Каждого ТекЭлемент Из ПравилаОбработки Цикл
			Для Каждого ТекПравило Из ТекЭлемент.Значение Цикл
				Результат.Добавить(ТекПравило.Обработка.ПолучитьРезультат());
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // ПрочитатьСкобкоФайл()
  
// Функция - добавляет строку к исходной и возвращает признак завершенности строки
// исходя из закрытия кавычек и окончания строки на "," или "}" 
//
// Параметры:
//  ДополняемаяСтрока    - Строка - исходная строка
//  Дополнение           - Строка - добавляемая строка
//  КавычкиОткрыты       - Булево - Истина - кавычки открыты; Ложь - кавычки закрыты
// 
// Возвращаемое значение:
//  Булево - Истина - строка завершена; Ложь - строка не завершена
//
&НаКлиенте
Функция ДополнитьСтрокуДляОбработки(ДополняемаяСтрока, Дополнение, КавычкиОткрыты)
	
	КоличествоКавычек = СтрЧислоВхождений(Дополнение, """");
	
	Если КавычкиОткрыты Тогда
		КавычкиОткрыты = (КоличествоКавычек % 2 = 0);
	Иначе
		КавычкиОткрыты = (КоличествоКавычек % 2 = 1);
	КонецЕсли;
	
	ДополняемаяСтрока = ДополняемаяСтрока + Дополнение;
	
	ПоследнийСимвол = Сред(Дополнение, СтрДлина(Дополнение), 1);
	
	// строка завершена если кавычки закрыты и последний символ = "," или "}"
	Возврат (НЕ КавычкиОткрыты) И (ПоследнийСимвол = "}" ИЛИ ПоследнийСимвол = ",");
	
КонецФункции // ДополнитьСтрокуДляОбработки()

// Функция - создает структуру нового элемента
//
// Параметры:
//  Родитель     - Структура              - ссылка на элемент-родитель (для корневого элемента "Неопределено")
//  НомераСтрок  - Соответствие(Число)    - массив номеров строк из которых был прочитан элемент
// 
// Возвращаемое значение:
//  Структура    - Новый элемент
//		*Родитель    - Структура            - ссылка на элемент-родитель
//		*Уровень     - Число                - уровень иерархии элемента
//		*Индекс      - Число                - индекс элемента в массиве значений родителя
//		*НомераСтрок - Соответствие(Число)  - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*Значения    - Массив(Структура)    - массив дочерних элементов
//
&НаКлиенте
Функция ИнициализироватьЭлемент(Знач Родитель, Знач НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	Уровень = 0;
	Если ТипЗнч(Родитель) = Тип("Структура") Тогда
		Если Родитель.Свойство("Уровень") Тогда
			Уровень = Родитель.Уровень + 1;
		КонецЕсли;
	КонецЕсли;
	
	Индекс = 0;
	Если ТипЗнч(Родитель) = Тип("Структура") Тогда
		Если Родитель.Свойство("Значения") Тогда
			Индекс = Родитель.Значения.ВГраница() + 1;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("Родитель,
	                            |Уровень,
	                            |Индекс,
	                            |НомераСтрок,
	                            |Значения",
	                            Родитель,
	                            Уровень,
	                            Индекс,
	                            НомераСтрок,
	                            Новый Массив());
	
	ДополнитьНомераСтрокРодителей(Результат);
	
	Возврат Результат;
	
КонецФункции // ИнициализироватьЭлемент()

// Процедура - дополняет массивы номеров строк родительских элементов номерами строк указанного элемента
//
// Параметры:
//  Элемент          - Структура           - структура элемента
//		*Родитель    - Структура           - ссылка на элемент-родитель
//		*Уровень     - Число               - уровень иерархии элемента
//		*Индекс      - Число               - индекс элемента в массиве значений родителя
//		*НомераСтрок - Соответствие(Число) - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*Значения    - Массив(Структура)   - массив дочерних элементов
//  НомераСтрок      - Соответствие(Число) - массив номеров строк для заполнения
// 
&НаКлиенте
Процедура ДополнитьНомераСтрокРодителей(Знач Элемент, Знач НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	Если ЗапоминатьНомераСтрок ИЛИ Элемент.НомераСтрок.Количество() = 0 Тогда
		Для Каждого ТекПара Из НомераСтрок Цикл
			Элемент.НомераСтрок.Вставить(ТекПара.Ключ, ТекПара.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ТекЭлемент = Элемент.Родитель;
	Пока НЕ ТекЭлемент = Неопределено Цикл
		Если ЗапоминатьНомераСтрок ИЛИ ТекЭлемент.НомераСтрок.Количество() = 0 Тогда
			Для Каждого ТекПара Из Элемент.НомераСтрок Цикл
				ТекЭлемент.НомераСтрок.Вставить(ТекПара.Ключ, ТекПара.Значение);
			КонецЦикла;
		КонецЕсли;
		ТекЭлемент = ТекЭлемент.Родитель;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьНомераСтрокРодителей()

// Процедура - Читает, разбирает данные из переданной строки и добавляет результат в иерархию массива структур
//
// Параметры:
//  ЭлементДляЗаполнения     - Структура                 - структура элемента
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//  ДанныеСтроки             - Строка                    - строка для разбора
//  СчетчикСимволов          - Число                     - счетчик прочитанных символов переданной строки
//  НомераСтрок              - Соответствие(Число)       - массив номеров строк, на основе которых была сформирована структура текущего уровня
//  ПравилаОбработки         - Соответствие(Структура)   - правила обработки элементов для каждого уровня
//
&НаКлиенте
Процедура ПрочитатьДанныеСтроки(ЭлементДляЗаполнения,
                                ДанныеСтроки,
                                СчетчикСимволов,
                                НомераСтрок = Неопределено,
                                ПравилаОбработки = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	ТекСтрока = "";
	КавычкиОткрыты = Ложь;
	ПредСимвол = "";
	
	ДлинаСтроки = СтрДлина(ДанныеСтроки);
	
	// посимвольное чтение строки
	Для й = СчетчикСимволов По ДлинаСтроки Цикл
		ТекСимвол = Сред(ДанныеСтроки, й, 1);
		
		Если КавычкиОткрыты Тогда // обработка строки внутри кавычек
			Если ТекСимвол = """" Тогда
				Если Сред(ДанныеСтроки, й, 2) = """""" Тогда  // это экранированные кавычки внутри строки
					ТекСтрока = ТекСтрока + Сред(ДанныеСтроки, й, 2);
					й = й + 1;
				Иначе // закрытие кавычек
					ТекСтрока = ТекСтрока + ТекСимвол;
					КавычкиОткрыты = Ложь;
				КонецЕсли;
			Иначе // любой символ добавляется к строке
				ТекСтрока = ТекСтрока + ТекСимвол;
			КонецЕсли;
		ИначеЕсли ТекСимвол = """" Тогда // открытие кавычек
			ТекСтрока = ТекСтрока + ТекСимвол;
			КавычкиОткрыты = Истина;
		ИначеЕсли ТекСимвол = "{" Тогда // открытие вложенного списка
			Если ЭлементДляЗаполнения = Неопределено Тогда
				ВремЭлементДляЗаполнения = ИнициализироватьЭлемент(Неопределено, НомераСтрок);
				ЭлементДляЗаполнения = ВремЭлементДляЗаполнения;
			Иначе
				ВремЭлементДляЗаполнения = ИнициализироватьЭлемент(ЭлементДляЗаполнения, НомераСтрок);
				ЭлементДляЗаполнения.Значения.Добавить(ВремЭлементДляЗаполнения);
			КонецЕсли;
			й = й + 1;
			ПрочитатьДанныеСтроки(ВремЭлементДляЗаполнения, ДанныеСтроки, й, НомераСтрок, ПравилаОбработки);
			Если й > СтрДлина(ДанныеСтроки) Тогда
				ЭлементДляЗаполнения = ВремЭлементДляЗаполнения; // если строка закончилась, то "наверх" поднимается элемент текущего уровня
				Возврат;
			КонецЕсли;
		ИначеЕсли ТекСимвол = "}" Тогда // закрытие вложенного списка
			Если НЕ (ПредСимвол = "{" ИЛИ ПредСимвол = "}" ИЛИ ПредСимвол = "") Тогда
				ЭлементДляЗаполнения.Значения.Добавить(ТекСтрока);
				ТекСтрока = "";
				ДополнитьНомераСтрокРодителей(ЭлементДляЗаполнения, НомераСтрок);
			КонецЕсли;
			
			// обработка добавленного элемента по правилам обработки
			ОбработатьЭлементПоПравилам(ЭлементДляЗаполнения, ПравилаОбработки);
			
			// проверка необходимости удаления обработанного элемента
			НужноУдалитьЭлемент = НужноУдалитьЭлемент(ЭлементДляЗаполнения, ПравилаОбработки);
			
			ЭлементДляЗаполнения = ЭлементДляЗаполнения.Родитель;
			
			Если НужноУдалитьЭлемент Тогда
				ЭлементДляЗаполнения.Значения.Удалить(ЭлементДляЗаполнения.Значения.ВГраница());
			КонецЕсли;
			
			СчетчикСимволов = й + 1;
			Возврат;
		ИначеЕсли ТекСимвол = "," Тогда // добавление элемента текущего списка
			ЭлементДляЗаполнения.Значения.Добавить(ТекСтрока);
			ДополнитьНомераСтрокРодителей(ЭлементДляЗаполнения, НомераСтрок);
			ТекСтрока = "";
		Иначе
			ТекСтрока = ТекСтрока + ТекСимвол;
		КонецЕсли;
		
		ПредСимвол = ТекСимвол;
	КонецЦикла;
	
	СчетчикСимволов = й;
	
КонецПроцедуры // ПрочитатьДанныеСтроки()

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииОбработкиЭлементов

// Процедура - Добавить правило обработки
//
// Параметры:
//  ПравилаОбработки              - Соответствие        - набор правил обработки элементов после прочтения
//  Уровень                       - Число               - уровень элемента для обработки правилом
//  ИмяОбработки                  - УправляемаяФорма    - имя внешней обработки элемента
//  ДополнительныеПараметры       - Структура           - дополнительные праметры для передачи
//                                                        в правила обработки
//
&НаКлиенте
Процедура ДобавитьПравилоОбработки(ПравилаОбработки, Уровень, ИмяОбработки, ДополнительныеПараметры)
	
	ОбработкаПравила = ПолучитьВнешнююОбработкуПоИмени(ИмяОбработки, ДополнительныеПараметры);
	
	Если НЕ ТипЗнч(ПравилаОбработки) = Тип("Соответствие") Тогда
		ПравилаОбработки = Новый Соответствие();
	КонецЕсли;

	Если НЕ ОбработкаПравила.ТипФайла() = ДополнительныеПараметры.ТипФайла Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравилаОбработки.Получить(Уровень) = Неопределено Тогда
		ПравилаОбработки.Вставить(Уровень, Новый Массив());
	КонецЕсли;
	
	ПравилаОбработки[Уровень].Добавить(Новый Структура("Обработка",
                                                       ОбработкаПравила));
	
КонецПроцедуры // ДобавитьПравилоОбработки()

// Процедура - выполняет обработку элемента по правилам
//
// Параметры:
//  Элемент                  - Структура                 - проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//  ПравилаОбработки         - Соответствие              - правила обработки элементов
//		*"Значения"                   - Структура          - структура для получения значений при чтении файла
//			<Имя набора значений>         - Массив             - прочитанные значения
//		*<Уровень элемента>           - Число              - уровень элемента для которого применяются правила
//			<правила обработки>           - Массив(Структура)  - набор правил для обработки элементов указанного уровня
//				ИмяПроцедуры                  - Строка             - имя процедуры обработки элемента
//				ИмяПроцедурыПроверкиУдаления  - Строка             - имя процедуры проверки необходимости удаления
//				                                                     элемента после обработки
//				ДополнительныеПараметры       - Структура          - дополнительные праметры для передачи
//				                                                     в правила обработки
//
&НаКлиенте
Процедура ОбработатьЭлементПоПравилам(Элемент, ПравилаОбработки)
	
	Правила = ПравилаОбработки[Элемент.Уровень];
	
	Если Правила = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекПравило Из Правила Цикл
		ТекПравило.Обработка.ДобавитьЗапись(Элемент);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЭлементПоПравилам()

// Функция - Проверяет необходимость удаления элемента после обработки
//
// Параметры:
//  Элемент                  - Структура                 - проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//  ПравилаОбработки         - Соответствие              - правила обработки элементов
//		*"Значения"                   - Структура          - структура для получения значений при чтении файла
//			<Имя набора значений>         - Массив             - прочитанные значения
//		*<Уровень элемента>           - Число              - уровень элемента для которого применяются правила
//			<правила обработки>           - Массив(Структура)  - набор правил для обработки элементов указанного уровня
//				ИмяПроцедуры                  - Строка             - имя процедуры обработки элемента
//				ИмяПроцедурыПроверкиУдаления  - Строка             - имя процедуры проверки необходимости удаления
//				                                                     элемента после обработки
//				ДополнительныеПараметры       - Структура          - дополнительные праметры для передачи
//				                                                     в правила обработки
// 
// Возвращаемое значение:
//   Булево - Истина - элемент нужно удалить после обработки
//
&НаКлиенте
Функция НужноУдалитьЭлемент(Элемент, ПравилаОбработки)
	
	Правила = ПравилаОбработки[Элемент.Уровень];
	
	Если Правила = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НужноУдалить = Истина;
	Для Каждого ТекПравило Из Правила Цикл
		НужноУдалить = ТекПравило.Обработка.НужноУдалитьЭлемент(Элемент);
		Если НужноУдалить = Ложь Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат НужноУдалить;
	
КонецФункции // НужноУдалитьЭлемент()

#КонецОбласти

#Область ПереопределяемыеПроцедурыИФункцииОбработкиЭлементов

// Функция - возвращает правила обработки элементов после прочтения
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - дополнительные праметры для передачи в правила обработки
// 
// Возвращаемое значение:
//  Соответствие                 - правила обработки элементов
//		*"Значения"                   - Структура          - структура для получения значений при чтении файла
//			<Имя набора значений>         - Массив             - прочитанные значения
//		*<Уровень элемента>           - Число              - уровень элемента для которого применяются правила
//			<правила обработки>           - Массив(Структура)  - набор правил для обработки элементов указанного уровня
//				ИмяПроцедуры                  - Строка             - имя процедуры обработки элемента
//				ИмяПроцедурыПроверкиУдаления  - Строка             - имя процедуры проверки необходимости удаления
//				                                                     элемента после обработки
//				ДополнительныеПараметры       - Структура          - дополнительные праметры для передачи
//				                                                     в правила обработки
//
&НаКлиенте
Функция ПолучитьПравилаОбработки(ДополнительныеПараметры)
	
	ПравилаОбработки = Новый Соответствие();
	
	ДобавитьПравилоОбработки(ПравилаОбработки, 4, "ктв_ОбработчикЧтенияИБ", ДополнительныеПараметры);
	ДобавитьПравилоОбработки(ПравилаОбработки, 1, "ктв_ОбработчикЧтенияЖР", ДополнительныеПараметры);
	ДобавитьПравилоОбработки(ПравилаОбработки, 1, "ктв_ОбработчикЧтенияСловаряЖР", ДополнительныеПараметры);
	
	Возврат ПравилаОбработки;
	
КонецФункции // ПолучитьПравилаОбработки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - возвращает путь к файлу текущей обработки
//
// Параметры:
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  Строка        - путь к файлу текущей обработки
// 
&НаСервере
Функция ПодключитьВнешнююОбработкуПоИмени(ИмяОбработки)
	
	ТекОбработка = РеквизитФормыВЗначение("Объект");
	
	ФайлЭтойОбработки = Новый Файл(ТекОбработка.ИспользуемоеИмяФайла);
	
	ПутьКОбработке = ФайлЭтойОбработки.Путь + ИмяОбработки + ФайлЭтойОбработки.Расширение;
	
	ПутьКОбработке = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКОбработке), ЭтаФорма.УникальныйИдентификатор);
	
	Возврат ВнешниеОбработки.Подключить(ПутьКОбработке, ИмяОбработки);
	
КонецФункции // ПодключитьВнешнююОбработкуПоИмени()

// Функция - возвращает основную внешней обработку по указанному имени
//
// Параметры:
//  ИмяОбработки               - Строка        - Имя внешней обработки
//  ДополнительныеПараметры    - Структура     - структура дополнительных параметров
// 
&НаКлиенте
Функция ПолучитьВнешнююОбработкуПоИмени(ИмяОбработки, ДополнительныеПараметры = Неопределено)
	
	ПодключитьВнешнююОбработкуПоИмени(ИмяОбработки);
	
	ПараметрыОбработки = Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма", ПараметрыОбработки, ЭтаФорма);
	
	Возврат ФормаОбработки;
	
КонецФункции // ПолучитьВнешнююОбработкуПоИмени()

// Функция - Возвращает типы файлов для обработки
// 
// Возвращаемое значение:
//   Структура - типы фалов для обработки
//
&НаКлиенте
Функция ТипыФайлов()
	
	ТипыФайлов = Новый Структура();
	ТипыФайлов.Вставить("НастройкиКластера", "LST");
	ТипыФайлов.Вставить("СловарьЖР"        , "LGF");
	ТипыФайлов.Вставить("ЖР"               , "LGP");
	
	Возврат ТипыФайлов;
	
КонецФункции // ТипыФайлов()

// Функция - Определяет тип файла
//
// Параметры:
//  ПутьКФайлу	 - Строка - путь к проверяемому файлу
// 
// Возвращаемое значение:
//   Строка - тип файла
//
&НаКлиенте
Функция ТипФайла(ПутьКФайлу)
	
	ВремФайл = Новый Файл(ПутьКФайлу);
	
	Расширение = ВРег(Сред(ВремФайл.Расширение, 2));
	
	ТипФайла = "";
	
	Если Расширение = "LST" Тогда
		ТипФайла = ТипыФайлов().НастройкиКластера;
	ИначеЕсли Расширение = "LGF" Тогда
		ТипФайла = ТипыФайлов().СловарьЖР;
	ИначеЕсли Расширение = "LGP" Тогда
		ТипФайла = ТипыФайлов().ЖР;
	КонецЕсли;
	
	Возврат ТипФайла;
	
КонецФункции // ТипФайла()

// Функция - удаляет начальные, конечные и экранированные кавычки из строки
//
// Параметры:
//  ПарамСтрока	 - Строка - строка для обработки
// 
// Возвращаемое значение:
//   Строка - результирующая строка
//
&НаКлиенте
Функция ОбработатьКавычкиВСтроке(Знач ПарамСтрока)
	
	ПарамСтрока = СтрЗаменить(ПарамСтрока, """""", """");
	
	Если Лев(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 2);
	КонецЕсли;
	
	Если Прав(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 1, СтрДлина(ПарамСтрока) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ПарамСтрока);
	
КонецФункции // ОбработатьКавычкиВСтроке()

#КонецОбласти

ЗапоминатьНомераСтрок = Ложь;
