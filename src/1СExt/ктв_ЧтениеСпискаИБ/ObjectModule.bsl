Перем Результат;

#Область ОбработчикиКомандФормы

// Процедура - выполняет чтение и обработку указанного файла
//
// Параметры:
//	Элемент            - ПутьКФайлу          - путь к файлу для чтения
//
Процедура Прочитать(ПутьКФайлу) Экспорт
	
	ОбработкаЧтения = ПолучитьВнешнююОбработкуПоИмени("ктв_ЧтениеСкобкофайла");
	
	ОбработкаЧтения.ДобавитьПравилоОбработки(4, ЭтотОбъект);
	
	ОбработкаЧтения.ПрочитатьСкобкоФайл(ПутьКФайлу);
	
КонецПроцедуры // Прочитать()

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - возвращает результат, накопленный обработкой
// 
// Параметры:
//  ЗавершениеОбработки      - Булево       Истина - выполнить действия при завершении обработки
//
// Возвращаемое значение:
//  Произвольный -  результат, накопленный обработкой
//
Функция ПолучитьРезультат(ЗавершениеОбработки = Ложь) Экспорт
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультат()

// Процедура - проверяет, что элемент является записью ИБ файла настроек кластера
// и добавляет его в список информационных баз
//
// Параметры:
//	Элемент         - Структура       проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
Процедура ДобавитьЗапись(Элемент) Экспорт
	
	Если НЕ Элемент.Уровень = 4 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элемент.Родитель.Индекс = 12 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элемент.Родитель.Родитель.Индекс = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Новый Структура();
	Запись.Вставить("Ид", Элемент.Значения[0]);
	Запись.Вставить("Имя", ОбработатьКавычкиВСтроке(Элемент.Значения[1]));
	Запись.Вставить("Описание", ОбработатьКавычкиВСтроке(Элемент.Значения[2]));
	Запись.Вставить("ТипСУБД", ОбработатьКавычкиВСтроке(Элемент.Значения[3]));
	Запись.Вставить("СерверСУБД", ОбработатьКавычкиВСтроке(Элемент.Значения[4]));
	Запись.Вставить("ИмяБазыСУБД", ОбработатьКавычкиВСтроке(Элемент.Значения[5]));
	Запись.Вставить("ПользовательСУБД", ОбработатьКавычкиВСтроке(Элемент.Значения[6]));
	
	ПараметрыИБ = СтрРазделить(ОбработатьКавычкиВСтроке(Элемент.Значения[8]), ";");
	Для Каждого ТекПараметр Из ПараметрыИБ Цикл
		ОписаниеПараметра = СтрРазделить(ТекПараметр, "=");
		Запись.Вставить(ОписаниеПараметра[0], ОписаниеПараметра[1]);
	КонецЦикла;
	
	Если НЕ ТипЗнч(Результат) = Тип("Массив") Тогда
		Результат = Новый Массив();
	КонецЕсли;
	
	Результат.Добавить(Запись);
	
КонецПроцедуры // ДобавитьЗапись()

// Функция - проверяет, что элемент является записью ИБ файла настроек кластера
// и проверяет необходимость удаления элемента
//
// Параметры:
//	Элемент                  - Структура          - проверяемый элемент (см. НужноУдалитьЭлемент)
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
// Возвращаемое значение:
//   Булево - Истина - элемент нужно удалить после обработки
//
Функция НужноУдалитьЭлемент(Элемент) Экспорт
	
	Если НЕ Элемент.Уровень = 4 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Элемент.Родитель.Индекс = 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Элемент.Родитель.Родитель.Индекс = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // НужноУдалитьЭлемент()

#КонецОбласти

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - ищет внешнюю обработку по указанному имени рядом с текущей и подключает ее
// возвращает объект подключенной обработки
//
// Параметры:
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  ВнешняяОбработкаОбъект        - внешняя обработка
// 
Функция ПолучитьВнешнююОбработкуПоИмени(ИмяОбработки)
	
	ФайлЭтойОбработки = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
	
	ПутьКОбработке = ФайлЭтойОбработки.Путь + ИмяОбработки + ФайлЭтойОбработки.Расширение;
	
	Возврат ВнешниеОбработки.Создать(ПутьКОбработке, Ложь);
	
КонецФункции // ПолучитьВнешнююОбработкуПоИмени()

// Функция - удаляет начальные, конечные и экранированные кавычки из строки
//
// Параметры:
//  ПарамСтрока	 - Строка - строка для обработки
// 
// Возвращаемое значение:
//   Строка - результирующая строка
//
Функция ОбработатьКавычкиВСтроке(Знач ПарамСтрока)
	
	ПарамСтрока = СтрЗаменить(ПарамСтрока, """""", """");
	
	Если Лев(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 2);
	КонецЕсли;
	
	Если Прав(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 1, СтрДлина(ПарамСтрока) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ПарамСтрока);
	
КонецФункции // ОбработатьКавычкиВСтроке()

#КонецОбласти
