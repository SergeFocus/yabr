{3,
{48,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{0},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3,0},0,"","",1,
{22,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{11,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0,0,0},"&НаКлиенте
Перем Результат;

#Область ПрограммныйИнтерфейс

// Функция - возвращает тип файла, обрабатываемый данной обработкой
// 
// Возвращаемое значение:
//  Строка -  тип файла, обрабатываемый данной обработкой
//
&НаКлиенте
Функция ТипФайла() Экспорт
	
	Возврат ""LGP"";
	
КонецФункции // ТипФайла()
	
// Функция - возвращает результат, накопленный обработкой
// 
// Параметры:
//  ЗавершениеОбработки      - Булево       Истина - выполнить действия при завершении обработки
//
// Возвращаемое значение:
//  Произвольный -  результат, накопленный обработкой
//
&НаКлиенте
Функция ПолучитьРезультат(ЗавершениеОбработки = Ложь) Экспорт
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультат()

// Процедура - проверяет, что элемент является записью журнала регистрации
// и добавляет его в массив записей
//
// Параметры:
//	Элемент         - Структура       проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
&НаКлиенте
Процедура ДобавитьЗапись(Элемент) Экспорт
	
	Если НЕ Элемент.Уровень = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элемент.Родитель.Индекс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Словари) = Тип(""Структура"") Тогда
		Словари = ПолучитьСловариДанныхЖР();
	КонецЕсли;
	
	ИмяФайла = """";
	Если Элемент.Свойство(""ПутьКФайлу"") Тогда
		ИмяФайла = Элемент.ПутьКФайлу;
	КонецЕсли;
	
	НомерСтроки = 0;
	Для Каждого ТекЭлемент Из Элемент.НомераСтрок Цикл
		НомерСтроки = ?(НомерСтроки = 0, ТекЭлемент.Ключ, Мин(НомерСтроки, ТекЭлемент.Ключ));
	КонецЦикла;
	
	Запись = Новый Структура();
	Запись.Вставить(""ИмяФайла"", ИмяФайла);
	Запись.Вставить(""НомерСтроки"", НомерСтроки);
	Запись.Вставить(""Время"", Дата(Элемент.Значения[0]));
	Запись.Вставить(""СтатусТранзакции"", Элемент.Значения[1]);
	
	Пользователь = Число(Элемент.Значения[3]);
	Если Словари.Свойство(""Пользователи"") Тогда
		ВремЗначение = Словари.Пользователи.Получить(Пользователь);
		Если НЕ ВремЗначение = Неопределено Тогда
			Пользователь = ВремЗначение;
		КонецЕсли;
	КонецЕсли;
	Запись.Вставить(""Пользователь"", Пользователь);
	
	Компьютер = Число(Элемент.Значения[4]);
	Если Словари.Свойство(""Компьютеры"") Тогда
		ВремЗначение = Словари.Компьютеры.Получить(Компьютер);
		Если НЕ ВремЗначение = Неопределено Тогда
			Компьютер = ВремЗначение;
		КонецЕсли;
	КонецЕсли;
	Запись.Вставить(""Компьютер"", Компьютер);
	
	Событие = Число(Элемент.Значения[7]);
	Если Словари.Свойство(""События"") Тогда
		ВремЗначение = Словари.События.Получить(Событие);
		Если НЕ ВремЗначение = Неопределено Тогда
			Событие = ВремЗначение;
		КонецЕсли;
	КонецЕсли;
	Запись.Вставить(""Событие"", Событие);
	
	Запись.Вставить(""Важность"", Элемент.Значения[8]);
	Запись.Вставить(""Комментарий"", ОбработатьКавычкиВСтроке(Элемент.Значения[9]));
	
	Метаданные = Число(Элемент.Значения[7]);
	Если Словари.Свойство(""Метаданные"") Тогда
		ВремЗначение = Словари.Метаданные.Получить(Метаданные);
		Если НЕ ВремЗначение = Неопределено Тогда
			Метаданные = ВремЗначение;
		КонецЕсли;
	КонецЕсли;
	Запись.Вставить(""Метаданные"", Метаданные);
	
	Запись.Вставить(""ТипДанных"", ОбработатьКавычкиВСтроке(Элемент.Значения[11].Значения[0]));
	Если Элемент.Значения[11].Значения.Количество() > 1 Тогда
		Запись.Вставить(""Данные"", ОбработатьКавычкиВСтроке(Элемент.Значения[11].Значения[1]));
	Иначе
		Запись.Вставить(""Данные"", """");
	КонецЕсли;
	Запись.Вставить(""ПредставлениеДанных"", ОбработатьКавычкиВСтроке(Элемент.Значения[12]));
	
	Если НЕ ТипЗнч(Результат) = Тип(""Массив"") Тогда
		Результат = Новый Массив();
	КонецЕсли;
	
	Результат.Добавить(Запись);
	
КонецПроцедуры // ДобавитьЗапись()

// Функция - проверяет, что элемент является записью журнала регистрации
// и проверяет необходимость удаления элемента
//
// Параметры:
//	Элемент                  - Структура          - проверяемый элемент (см. НужноУдалитьЭлемент)
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
// Возвращаемое значение:
//   Булево - Истина - элемент нужно удалить после обработки
//
&НаКлиенте
Функция НужноУдалитьЭлемент(Элемент) Экспорт
	
	Если НЕ Элемент.Уровень = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Элемент.Родитель.Индекс = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // НужноУдалитьЭлемент()

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - Обработчик события формы ""ПриСозданииНаСервере""
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство(""ДополнительныеПараметры"") Тогда
		ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - удаляет начальные, конечные и экранированные кавычки из строки
//
// Параметры:
//  ПарамСтрока	 - Строка - строка для обработки
// 
// Возвращаемое значение:
//   Строка - результирующая строка
//
&НаКлиенте
Функция ОбработатьКавычкиВСтроке(Знач ПарамСтрока)
	
	ПарамСтрока = СтрЗаменить(ПарамСтрока, """""""""""", """""""");
	
	Если Лев(ПарамСтрока, 1) = """""""" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 2);
	КонецЕсли;
	
	Если Прав(ПарамСтрока, 1) = """""""" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 1, СтрДлина(ПарамСтрока) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ПарамСтрока);
	
КонецФункции // ОбработатьКавычкиВСтроке()

// Функция - возвращает словари данных для чтения журнала регистрации
//
// Возвращаемое значение:
//   Структура - словари данных журнала регистрации
//
&НаКлиенте
Функция ПолучитьСловариДанныхЖР()
	
	ФайлЖурнала = Новый Файл(ДополнительныеПараметры.ПутьКФайлу);
	
	ПутьКФайлу = ФайлЖурнала.Путь + ""1Cv8.lgf"";
	
	Попытка
		РезультатЧтенияСловарей = ВладелецФормы.ПрочитатьСкобкофайл(ПутьКФайлу);
	Исключение
		Возврат Новый Структура();
	КонецПопытки;
	
	Если РезультатЧтенияСловарей.Количество() = 0 Тогда
		Возврат Новый Структура();
	Иначе
		Возврат РезультатЧтенияСловарей[0];
	КонецЕсли; 
	
КонецФункции // ПолучитьСловариДанныхЖР()

#КонецОбласти
",
{4,3,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",505eda56-d463-4661-8928-56787bac42d0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ДополнительныеПараметры",
{1,1,
{"ru","Дополнительные параметры"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"Словари",
{1,1,
{"ru","Словари"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}